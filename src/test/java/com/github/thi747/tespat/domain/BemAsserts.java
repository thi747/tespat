package com.github.thi747.tespat.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class BemAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBemAllPropertiesEquals(Bem expected, Bem actual) {
        assertBemAutoGeneratedPropertiesEquals(expected, actual);
        assertBemAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBemAllUpdatablePropertiesEquals(Bem expected, Bem actual) {
        assertBemUpdatableFieldsEquals(expected, actual);
        assertBemUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBemAutoGeneratedPropertiesEquals(Bem expected, Bem actual) {
        assertThat(expected)
            .as("Verify Bem auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBemUpdatableFieldsEquals(Bem expected, Bem actual) {
        assertThat(expected)
            .as("Verify Bem relevant properties")
            .satisfies(e -> assertThat(e.getPatrimonio()).as("check patrimonio").isEqualTo(actual.getPatrimonio()))
            .satisfies(e -> assertThat(e.getNome()).as("check nome").isEqualTo(actual.getNome()))
            .satisfies(e -> assertThat(e.getDescricao()).as("check descricao").isEqualTo(actual.getDescricao()))
            .satisfies(e -> assertThat(e.getNumeroDeSerie()).as("check numeroDeSerie").isEqualTo(actual.getNumeroDeSerie()))
            .satisfies(e -> assertThat(e.getDataAquisicao()).as("check dataAquisicao").isEqualTo(actual.getDataAquisicao()))
            .satisfies(e -> assertThat(e.getValorCompra()).as("check valorCompra").isEqualTo(actual.getValorCompra()))
            .satisfies(e -> assertThat(e.getValorAtual()).as("check valorAtual").isEqualTo(actual.getValorAtual()))
            .satisfies(e -> assertThat(e.getEstado()).as("check estado").isEqualTo(actual.getEstado()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getObservacoes()).as("check observacoes").isEqualTo(actual.getObservacoes()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBemUpdatableRelationshipsEquals(Bem expected, Bem actual) {
        assertThat(expected)
            .as("Verify Bem relationships")
            .satisfies(e -> assertThat(e.getCategoria()).as("check categoria").isEqualTo(actual.getCategoria()))
            .satisfies(e -> assertThat(e.getFornecedor()).as("check fornecedor").isEqualTo(actual.getFornecedor()));
    }
}
