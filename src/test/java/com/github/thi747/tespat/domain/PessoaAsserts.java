package com.github.thi747.tespat.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PessoaAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPessoaAllPropertiesEquals(Pessoa expected, Pessoa actual) {
        assertPessoaAutoGeneratedPropertiesEquals(expected, actual);
        assertPessoaAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPessoaAllUpdatablePropertiesEquals(Pessoa expected, Pessoa actual) {
        assertPessoaUpdatableFieldsEquals(expected, actual);
        assertPessoaUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPessoaAutoGeneratedPropertiesEquals(Pessoa expected, Pessoa actual) {
        assertThat(expected)
            .as("Verify Pessoa auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPessoaUpdatableFieldsEquals(Pessoa expected, Pessoa actual) {
        assertThat(expected)
            .as("Verify Pessoa relevant properties")
            .satisfies(e -> assertThat(e.getUsuario()).as("check usuario").isEqualTo(actual.getUsuario()))
            .satisfies(e -> assertThat(e.getNome()).as("check nome").isEqualTo(actual.getNome()))
            .satisfies(e -> assertThat(e.getCpf()).as("check cpf").isEqualTo(actual.getCpf()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e -> assertThat(e.getAtivo()).as("check ativo").isEqualTo(actual.getAtivo()))
            .satisfies(e -> assertThat(e.getEndereco()).as("check endereco").isEqualTo(actual.getEndereco()))
            .satisfies(e -> assertThat(e.getCidade()).as("check cidade").isEqualTo(actual.getCidade()))
            .satisfies(e -> assertThat(e.getEstado()).as("check estado").isEqualTo(actual.getEstado()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPessoaUpdatableRelationshipsEquals(Pessoa expected, Pessoa actual) {}
}
